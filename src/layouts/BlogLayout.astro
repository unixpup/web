---
import Layout from './Layout.astro';
import Footer from '../components/Footer.astro';
import { slide } from 'astro:transitions';
import { calculateReadingTime } from '../utils/readingTime';

export interface Props {
  frontmatter: {
    title: string;
    description?: string;
    publishDate: string;
    tags?: string[];
    readingTime?: string;
    heroImage?: string;
    author?: string;
  };
  rawContent?: () => string;
}

const { frontmatter, rawContent } = Astro.props;

// Calculate reading time if not already specified in frontmatter
let readingTime = frontmatter.readingTime;
if (!readingTime && rawContent) {
  readingTime = calculateReadingTime(rawContent());
}

const formattedDate = new Date(frontmatter.publishDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

<Layout title={`${frontmatter.title} | Devblog | vermillionpaws`} description={frontmatter.description}>
  <main class="min-h-screen pt-24 pb-20">
    <div class="container max-w-3xl mx-auto px-4 md:px-6">
      <div transition:animate={slide({ duration: '0.5s' })}>
        <div class="mb-8">
          <a href="/devblog/" class="text-tokyo-cyan hover:text-tokyo-blue transition-colors inline-flex items-center mb-4 group">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 transition-transform group-hover:-translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to all posts
          </a>

          <h1 class="text-3xl md:text-4xl font-bold text-white mb-4">
            {frontmatter.title}
          </h1>

          <div class="flex flex-wrap items-center text-sm text-neutral-400 mb-6 gap-4">
            {frontmatter.author && (
              <span class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                {frontmatter.author}
              </span>
            )}

            <span class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              {formattedDate}
            </span>

            {readingTime && (
              <span class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {readingTime}
              </span>
            )}
          </div>

          {frontmatter.tags && frontmatter.tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-8">
              {frontmatter.tags.map(tag => (
                <span class="bg-tokyo-bg-highlight text-tokyo-blue px-3 py-1 rounded-full text-xs font-medium">
                  #{tag}
                </span>
              ))}
            </div>
          )}

          {frontmatter.heroImage && (
            <div class="mb-8">
              <img
                src={frontmatter.heroImage}
                alt={frontmatter.title}
                class="w-full h-auto rounded-lg shadow-lg object-cover"
              />
            </div>
          )}

          <div class="h-1 w-24 bg-gradient-to-r from-tokyo-blue to-tokyo-purple mb-8"></div>
        </div>

        <!-- Blog content -->
        <article class="prose prose-invert max-w-none prose-headings:text-tokyo-blue prose-a:text-tokyo-cyan prose-a:no-underline hover:prose-a:text-tokyo-blue prose-code:text-tokyo-green prose-code:bg-tokyo-bg-highlight prose-code:rounded prose-code:px-1 prose-blockquote:border-l-tokyo-blue prose-blockquote:bg-tokyo-bg-highlight/30 prose-blockquote:px-4 prose-blockquote:py-1 prose-blockquote:rounded-r prose-img:rounded-lg">
          <slot />
        </article>
      </div>
    </div>
  </main>

  <Footer />
</Layout>

<style is:global>
  /* Tokyo Night syntax highlighting styles for MDX code blocks */
  pre {
    padding: 1.5rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    background-color: var(--theme-bg-highlight);
    margin: 1.5rem 0;
    border: 1px solid var(--theme-terminal-black);
  }

  pre code {
    background-color: transparent;
    padding: 0;
    font-family: 'Menlo', 'Monaco', 'Courier New', monospace;
    font-size: 0.9em;
    line-height: 1.5;
    text-shadow: none;
  }

  /* Tokens for MDX syntax highlighting with Tokyo Night theme */
  .token.comment,
  .token.prolog,
  .token.doctype,
  .token.cdata {
    color: var(--theme-comment);
  }

  .token.punctuation {
    color: var(--theme-fg);
  }

  .token.namespace {
    opacity: 0.7;
  }

  .token.property,
  .token.tag,
  .token.boolean,
  .token.number,
  .token.constant,
  .token.symbol {
    color: var(--theme-orange);
  }

  .token.selector,
  .token.attr-name,
  .token.string,
  .token.char,
  .token.builtin {
    color: var(--theme-green);
  }

  .token.operator,
  .token.entity,
  .token.url,
  .language-css .token.string,
  .style .token.string {
    color: var(--theme-yellow);
  }

  .token.atrule,
  .token.attr-value,
  .token.keyword {
    color: var(--theme-blue);
  }

  .token.function,
  .token.class-name {
    color: var(--theme-magenta);
  }

  .token.regex,
  .token.important,
  .token.variable {
    color: var(--theme-cyan);
  }

  .token.important,
  .token.bold {
    font-weight: bold;
  }

  .token.italic {
    font-style: italic;
  }

  .token.entity {
    cursor: help;
  }

  /* Line highlighting */
  .line-highlight {
    background: rgba(122, 162, 247, 0.1);
    border-left: 3px solid var(--theme-blue);
  }

  /* Inline code */
  :not(pre) > code {
    background-color: var(--theme-bg-highlight);
    color: var(--theme-green);
    padding: 0.2em 0.4em;
    border-radius: 0.25em;
    font-size: 0.9em;
    font-family: 'Menlo', 'Monaco', 'Courier New', monospace;
  }
</style>