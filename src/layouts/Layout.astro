---
import { ViewTransitions } from 'astro:transitions';
import '../styles/global.css';
import Navigation from '../components/Navigation.astro';
import ThemeSwitcher from '../components/ThemeSwitcher.astro';
import RenderAlert from '../components/RenderAlert.astro';

export interface Props {
	title?: string;
	description?: string;
}

// Destructure props to access title and description
const { title = "Default Title", description = "" } = Astro.props;

// Get all routes for prefetching - now with proper i18n support
const pages = await Astro.glob('../pages/**/*.astro');
const baseRoutes = pages.map(page => {
  const path = page.url?.replace(/^\/|\/$/g, '');
  return path ? `/${path}/` : '/';
}).filter(Boolean);

---

<!doctype html>
<html class={`bg-tokyo-bg`}>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions transition:animate="slide" />

		<!-- Base Latin font -->
		<link href="https://api.fontshare.com/v2/css?f[]=satoshi@400,500,700&display=swap" rel="stylesheet">
	</head>
	<body class="min-h-screen bg-neutral-950 text-neutral-200">
		<div id="webgl-container" class="fixed inset-0 z-0 pointer-events-none"></div>
		<div id="cursor-follow" class="fixed w-6 h-6 rounded-full pointer-events-none z-50 transition-transform duration-100 ease-out mix-blend-difference bg-white opacity-50"></div>
		<RenderAlert />
		<div class="relative z-10">
			<Navigation>
				<ThemeSwitcher />
			</Navigation>
			<slot />
		</div>
	</body>
</html>

<script>
	import { ProgressiveRenderer, RenderingMode } from '../utils/progressiveRenderer';
	import { ThemeManager } from '../utils/themeManager';
	import { gsap } from 'gsap';

	// Initialize theme manager
	let themeManager: any;
	let renderer: any;

	// Custom cursor follow
	const setupCursor = () => {
		const cursorFollow = document.getElementById('cursor-follow');

		if (!cursorFollow) return;

		document.addEventListener('mousemove', (e) => {
			gsap.to(cursorFollow, {
				x: e.clientX - 12,
				y: e.clientY - 12,
				duration: 0.1, // Faster animation for better performance feel
				ease: 'power2.out'
			});
		});

		// Enhance links with cursor effect
		const enhanceLinks = () => {
			const links = document.querySelectorAll('a[href^="/"]');
			links.forEach((link) => {
				link.addEventListener('mouseenter', () => {
					if (cursorFollow) {
						gsap.to(cursorFollow, {
							scale: 2,
							opacity: 0.8,
							duration: 0.2
						});
					}
				});

				link.addEventListener('mouseleave', () => {
					if (cursorFollow) {
						gsap.to(cursorFollow, {
							scale: 1,
							opacity: 0.5,
							duration: 0.2
						});
					}
				});
			});
		};

		enhanceLinks();
		document.addEventListener('astro:page-load', enhanceLinks);
	};

	// Initialize renderer
	const setupRenderer = () => {
		const container = document.getElementById('webgl-container');
		if (!container) return;

		// Dispose previous renderer if it exists (on page transitions)
		if (renderer) {
			renderer.dispose();
		}

		// Initialize the progressive renderer
		renderer = new ProgressiveRenderer({
			container,
			particleCount: 200,
			onRenderingModeChange: (mode) => {
				// Dispatch event to notify components about rendering mode
				window.dispatchEvent(new CustomEvent('renderingModeChange', {
					detail: { mode }
				}));
			}
		});

		// Set up theme-aware styling for the WebGL canvas
		const applyThemeToCanvas = (theme: string) => {
			const canvas = container.querySelector('canvas');
			if (!canvas) return;

			if (theme === 'light') {
				// Light mode styling
				canvas.style.opacity = '0.3';
				canvas.style.filter = 'invert(1) hue-rotate(180deg)';
				canvas.style.mixBlendMode = 'multiply';
			} else {
				// Dark mode styling
				canvas.style.opacity = '1';
				canvas.style.filter = 'none';
				canvas.style.mixBlendMode = 'screen';
			}
		};

		// Apply theme changes
		themeManager = ThemeManager.getInstance();
		applyThemeToCanvas(themeManager.getCurrentEffectiveTheme());

		// Subscribe to theme changes
		themeManager.subscribe((theme: string) => {
			applyThemeToCanvas(theme);
		});
	};

	// Setup on initial page load and after transitions
	const setupPage = () => {
		// Initialize theme manager on client side
		if (!themeManager) {
			themeManager = ThemeManager.getInstance();
		}

		setupCursor();
		setupRenderer();
	};

	// Initialize on first page load
	setupPage();

	// Re-initialize after Astro view transitions
	document.addEventListener('astro:page-load', setupPage);
</script>
