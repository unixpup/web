---
import { languages } from '../i18n/config';
import { t, astroI18n } from 'astro-i18n';

const currentLocale = astroI18n.locale;
---

<div class="relative group">
  <button
    id="language-menu-button"
    aria-expanded="false"
    aria-haspopup="true"
    class="flex items-center gap-1 text-neutral-400 hover:text-white transition-colors"
  >
    <span class="sr-only">Switch language</span>
    <span>{languages.find(lang => lang.locale === currentLocale)?.flag}</span>
    <svg
      xmlns="http//www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="transition-transform group-hover:rotate-180"
    >
      <polyline points="6 9 12 15 18 9"></polyline>
    </svg>
  </button>

  <div
    id="language-menu"
    class="absolute right-0 mt-2 w-48 bg-black/80 backdrop-blur-md border border-white/10 rounded-md shadow-lg overflow-hidden z-50 opacity-0 scale-95 translate-y-2 invisible transition-all duration-200"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {languages.map(language => (
        <a
          href={`/${language.locale === 'en' ? '' : language.locale}`}
          class={`flex items-center gap-2 px-4 py-2 text-sm ${language.locale === currentLocale ? 'bg-blue-600/30 text-white' : 'text-gray-300 hover:bg-white/10'}`}
          role="menuitem"
          tabindex="-1"
        >
          <span>{language.flag}</span>
          <span>{language.name}</span>
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const button = document.getElementById('language-menu-button');
    const menu = document.getElementById('language-menu');

    if (button && menu) {
      // Open/close menu when button is clicked
      button.addEventListener('click', () => {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', expanded ? 'false' : 'true');
        menu.classList.toggle('invisible');
        menu.classList.toggle('opacity-0');
        menu.classList.toggle('scale-95');
        menu.classList.toggle('translate-y-2');

        if (!expanded) {
          menu.classList.add('opacity-100', 'scale-100', 'translate-y-0');
        } else {
          menu.classList.remove('opacity-100', 'scale-100', 'translate-y-0');
        }
      });

      // Close menu when clicking outside
      document.addEventListener('click', (event) => {
        if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('invisible', 'opacity-0', 'scale-95', 'translate-y-2');
          menu.classList.remove('opacity-100', 'scale-100', 'translate-y-0');
        }
      });
    }
  });
</script>