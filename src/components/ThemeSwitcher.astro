---
---

<div class="theme-switcher-container">
  <button
    id="theme-switcher"
    aria-label="Toggle theme"
    class="theme-switcher"
  >
    <div class="icons-container">
      <!-- Dark icon -->
      <svg xmlns="http://www.w3.org/2000/svg" class="icon dark-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 3a6.364 6.364 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
      </svg>

      <!-- Light icon -->
      <svg xmlns="http://www.w3.org/2000/svg" class="icon light-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="4"></circle>
        <path d="M12 2v2"></path>
        <path d="M12 20v2"></path>
        <path d="m4.93 4.93 1.41 1.41"></path>
        <path d="m17.66 17.66 1.41 1.41"></path>
        <path d="M2 12h2"></path>
        <path d="M20 12h2"></path>
        <path d="m6.34 17.66-1.41 1.41"></path>
        <path d="m19.07 4.93-1.41 1.41"></path>
      </svg>

      <!-- System icon -->
      <svg xmlns="http://www.w3.org/2000/svg" class="icon system-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="2" y="3" width="20" height="14" rx="2"></rect>
        <line x1="8" y1="21" x2="16" y2="21"></line>
        <line x1="12" y1="17" x2="12" y2="21"></line>
      </svg>
    </div>
  </button>
  <div class="theme-menu" id="theme-menu">
    <button class="theme-option" data-theme="light" aria-label="Light mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="4"></circle>
        <path d="M12 2v2"></path>
        <path d="M12 20v2"></path>
        <path d="m4.93 4.93 1.41 1.41"></path>
        <path d="m17.66 17.66 1.41 1.41"></path>
        <path d="M2 12h2"></path>
        <path d="M20 12h2"></path>
        <path d="m6.34 17.66-1.41 1.41"></path>
        <path d="m19.07 4.93-1.41 1.41"></path>
      </svg>
      <span class="sr-only">Light</span>
    </button>
    <button class="theme-option" data-theme="dark" aria-label="Dark mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 3a6.364 6.364 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
      </svg>
      <span class="sr-only">Dark</span>
    </button>
    <button class="theme-option" data-theme="system" aria-label="System mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="2" y="3" width="20" height="14" rx="2"></rect>
        <line x1="8" y1="21" x2="16" y2="21"></line>
        <line x1="12" y1="17" x2="12" y2="21"></line>
      </svg>
      <span class="sr-only">System</span>
    </button>
  </div>
</div>

<style>
  .theme-switcher-container {
    position: relative;
  }

  .theme-switcher {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 9999px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: var(--theme-fg);
    cursor: none;
    transition: background-color 0.2s ease, border-color 0.2s ease;
    position: relative;
  }

  .theme-switcher:hover {
    background: rgba(255, 255, 255, 0.15);
  }

  .icons-container {
    position: relative;
    width: 24px;
    height: 24px;
  }

  .icon {
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    transform: scale(0.5);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  .icon.active {
    opacity: 1;
    transform: scale(1);
  }

  .theme-menu {
    position: absolute;
    top: calc(100% + 8px);
    right: 0;
    background: var(--theme-bg-highlight);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 4px;
    width: auto;
    display: flex;
    flex-direction: row;
    gap: 2px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: opacity 0.2s ease, transform 0.2s ease, visibility 0.2s;
    z-index: 50;
  }

  .theme-menu.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .theme-option {
    padding: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    border: none;
    border-radius: 4px;
    cursor: none;
    color: var(--theme-fg);
    transition: background-color 0.2s;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .theme-option:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .theme-option.active {
    background: rgba(255, 255, 255, 0.15);
  }

  @media (pointer: coarse) {
    .theme-switcher, .theme-option {
      cursor: pointer;
    }
  }

  /* Dark theme specific styles */
  :global(.theme-dark) .theme-switcher {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.1);
  }

  /* Light theme specific styles */
  :global(.theme-light) .theme-switcher {
    background: rgba(0, 0, 0, 0.05);
    border-color: rgba(0, 0, 0, 0.1);
  }

  :global(.theme-light) .theme-menu {
    background: #ffffff;
    border-color: rgba(0, 0, 0, 0.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  :global(.theme-light) .theme-option:hover {
    background: rgba(0, 0, 0, 0.05);
  }

  :global(.theme-light) .theme-option.active {
    background: rgba(0, 0, 0, 0.08);
  }
</style>

<script>
  import { ThemeManager } from '../utils/themeManager';

  // Initialize theme on client side
  document.addEventListener('astro:page-load', () => {
    setupThemeSwitcher();
  });

  function setupThemeSwitcher() {
    const themeManager = ThemeManager.getInstance();
    const themeSwitcher = document.getElementById('theme-switcher');
    const themeMenu = document.getElementById('theme-menu');
    const themeOptions = document.querySelectorAll('.theme-option');
    const darkIcon = document.querySelector('.dark-icon');
    const lightIcon = document.querySelector('.light-icon');
    const systemIcon = document.querySelector('.system-icon');

    // Update UI based on current theme
    function updateThemeUI(currentTheme) {
      themeOptions.forEach(option => {
        const theme = option.getAttribute('data-theme');
        if (theme === currentTheme) {
          option.classList.add('active');
        } else {
          option.classList.remove('active');
        }
      });

      // Update active icon
      [darkIcon, lightIcon, systemIcon].forEach(icon => icon?.classList.remove('active'));

      if (currentTheme === 'system') {
        systemIcon?.classList.add('active');
      } else if (currentTheme === 'dark') {
        darkIcon?.classList.add('active');
      } else {
        lightIcon?.classList.add('active');
      }
    }

    // Toggle theme menu on click
    if (themeSwitcher && themeMenu) {
      themeSwitcher.addEventListener('click', (event) => {
        event.stopPropagation();
        themeMenu.classList.toggle('show');
      });
    }

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (themeMenu && themeMenu.classList.contains('show')) {
        themeMenu.classList.remove('show');
      }
    });

    // Handle theme option clicks
    themeOptions.forEach(option => {
      option.addEventListener('click', (event) => {
        event.stopPropagation();
        const theme = option.getAttribute('data-theme');
        if (theme) {
          themeManager.setTheme(theme);
          if (themeMenu) {
            themeMenu.classList.remove('show');
          }
        }
      });
    });

    // Initialize UI with current theme
    updateThemeUI(themeManager.getCurrentTheme());

    // Subscribe to theme changes
    themeManager.subscribe(theme => {
      updateThemeUI(themeManager.getCurrentTheme());
    });
  }
</script>